*lsp_contrib.txt* Collection of utility, callback and autocomand for Nvim LSP.
*lsp_contrib*

==============================================================================
CONTENTS                                                *lsp_contrib_contents*

Introduction                                        |lsp_contrib_introduction|
Install                                                  |lsp_contrib_install|
Usage                                                      |lsp_contrib_usage|
Functions                                              |lsp_contrib_functions|
    Utility Functions                                       |lsp_contrib.util|
Options                                                  |lsp_contrib.options|

==============================================================================
INTRODUCTION                                        *lsp_contrib_introduction*

Collection of utility, callback and autocomand for Nvim built-in LSP client.

Provides utility function for dubugging Nvim built-in LSP client and viewing
status and callbacks to replace the default callbacks.

==============================================================================
INSTALL                                                  *lsp_contrib_install*

Install the lsp-contrib.nvim plugin. Below is a sample using plug.vim
>
    Plug 'h-michael/lsp-contrib.nvim'

==============================================================================
USAGE                                                      *lsp_contrib_usage*

This plugin is written in Lua.
You can call Lua from Vim script like this. >
    lua require"lsp_contrib".util.pp_buf_clients()

With luaeval function >
    luaeval("require'lsp_contrib'.util.pp_buf_clients()")

With hear document >
    lua << EOF
        local contrib = require"lsp_contrib"
        contrib.util.pp_buf_clients()
    << EOF

And you can call Lua from command like this. >
    :lua require"lsp_contrib".util.pp_buf_clients()

With luaeval function >
    :call luaeval("require'lsp_contrib'.util.pp_buf_clients()")

==============================================================================
FUNCTIONS                                              *lsp_contrib_functions*

                                      *lsp_contrib.set_signature_help_autocmd*
lsp_contrib.set_signature_help_autocmd({wait})
    Override `textDocument/signatureHelp` default callback and set autocmd for
    `textDocument/signatureHelp`.
    That autocmd execute `textDocument/signatureHelp` request if necessary,
    when |CursorMoved| event occurs.

    Parameters: ~
        {wait}  delay time(ms)

                                    *lsp_contrib.unset_signature_help_autocmd*
lsp_contrib.unset_signature_help_autocmd({wait})
    Unset autocmd for `textDocument/signatureHelp`.

                                 *lsp_contrib.set_publish_diagnostics_autocmd*
lsp_contrib.set_publish_diagnostics_autocmd({wait})
    Override `textDocument/publishDiagnostics` default callback and set
    autocmd for `textDocument/publishDiagnostics`.
    That autocmd for showing publishDiagnostics`, when |CursorMoved| event
    occurs.

    Parameters: ~
        {wait}  delay time(ms)

                               *lsp_contrib.unset_publish_diagnostics_autocmd*
lsp_contrib.unset_publish_diagnostics_autocmd({wait})
    Unset autocmd for `textDocument/publishDiagnostics`.

------------------------------------------------------------------------------
UTILITY FUNCTION                                            *lsp_contrib.util*

                                             *lsp_contrib.util.pp_buf_clients*
lsp_contrib.util.pp_buf_clients()
    Print active lsp clients in the current buffer.

    Example: >
        lua require"lsp_contrib".util.pp_buf_clients()

                                         *lsp_contrib.util.buf_clients_config*
lsp_contrib.util.buf_clients_config()
    Return active lsp client configs in current buffer.

    Return: ~
        List of client info tables.
        - Members
         - name
          - name of language server name
         - filetype
          - target filetype names
         - client
          - see |vim.lsp.client|

    Example: >
        lua require"lsp_contrib".util.buf_clients()

                                    *lsp_contrib.util.pp_buf_clients_config()*
lsp_contrib.util.pp_buf_clients_config()
    Print active lsp client configs in current buffer

                                 *lsp_contrib.util.buf_servers_capabilities()*
lsp_contrib.util.buf_servers_capabilities()
    Return active language servers capabilities in current buffer.

    Return: ~
        List of language server capabilities
        - Members
         - name
          - name of language server name
         - filetype
          - target filetype names
         - server_capabilities
          - table of language server capabilities

    Example: >
        lua require"lsp_contrib".util.buf_servers_capabilities()

                              *lsp_contrib.util.pp_buf_servers_capabilities()*
lsp_contrib.util.pp_buf_servers_capabilities()
    Print active language servers capabilities in current buffer.

                                *lsp_contrib.util.buf_resolved_capabilities()*
lsp_contrib.util.buf_resolved_capabilities()
    Return list of resolve_capabilities.

    Return: ~
        List of resolve_capabilities
        - Members
         - name
          - name of language server name
         - filetype
          - target filetype names
         - resolve_capabilities
          - see |vim.lsp.protocol.resolve_capabilities()|

    Example: >
        lua require"lsp_contrib".util.buf_resolved_capabilities()


                             *lsp_contrib.util.pp_buf_resolved_capabilities()*
lsp_contrib.util.pp_buf_resolved_capabilities()
    Print list of resolve_capabilities.

==============================================================================
OPTIONS                                                  *lsp_contrib_options*

                                       *g:lsp_publish_diagnostics_virtualtext*
g:lsp_publish_diagnostics_virtualtext
    If you execute *lsp_contrib.set_publish_diagnostics_autocmd()*, you can
    chose whether showing diagnostic messages at the virtualtext or not.

    Type: boolean
    Default: false

                                    *g:lsp_publish_diagnostics_display_method*
g:lsp_publish_diagnostics_display_method
    If you execute *lsp_contrib.set_publish_diagnostics_autocmd()*, you can
    chose where showing diagnostic messages at the virtualtext or not.

    Type: string
    Members:
        - "echo"
        - "float"
    Default: "float"

                               *lsp_publish_diagnostics_severity_string_error*
g:lsp_publish_diagnostics_severity_string_error
    Type: string
    Default: "E"

                             *lsp_publish_diagnostics_severity_string_warning*
g:lsp_publish_diagnostics_severity_string_warning
    Type: string
    Default: "W"

                                *lsp_publish_diagnostics_severity_string_info*
g:lsp_publish_diagnostics_severity_string_info
    Type: string
    Default: "I"

                                *lsp_publish_diagnostics_severity_string_hint*
g:lsp_publish_diagnostics_severity_string_hint
    Type: string
    Default: "H"

==============================================================================
vim:tw=78:ts=4:sts=4:sw=4:ft=help:norl:
